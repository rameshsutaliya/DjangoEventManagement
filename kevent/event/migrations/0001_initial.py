# Generated by Django 2.1.4 on 2018-12-30 07:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import event.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the Event Title or Heading of the event', max_length=300, verbose_name='Title*')),
                ('event_poster', models.ImageField(help_text='Please Upload the Event poster at here..', upload_to=event.models.event_directory_path)),
                ('body', models.TextField(help_text='Other Detail or message of the Event', null=True, verbose_name='Event Information *')),
                ('date_start', models.DateTimeField(help_text='When will be start the event?', null=True, verbose_name='Start*')),
                ('date_end', models.DateTimeField(blank=True, help_text='When will be event end??', null=True, verbose_name='End ')),
                ('event_cate', models.CharField(default='KIIT', help_text='In which Category this event belongs ?', max_length=200, null=True, verbose_name='Event Categories:')),
                ('event_web', models.URLField(blank=True, help_text='If Event has a website then put that web link at here!.', null=True, verbose_name='Event Website :')),
                ('event_addr1', models.CharField(default='KIIT deemed to be University', help_text='Where this event will happen?', max_length=150, null=True, verbose_name='Event address Line 1*:')),
                ('event_addr2', models.CharField(blank=True, default='KIIT', max_length=100, null=True, verbose_name='Event address Line 2')),
                ('event_addr3', models.CharField(blank=True, default='Odisha', help_text='State where this event will be happen', max_length=100, null=True, verbose_name='State :')),
                ('event_addr4', models.CharField(default='India', help_text='If the event going to outside to the country please mention here...Keep Smile..', max_length=100, null=True, verbose_name='Country* : ')),
                ('zipcode', models.CharField(default='751024', help_text='Please Provide the postel code..', max_length=8, null=True, verbose_name='Zip Code*:')),
                ('view_count', models.PositiveIntegerField(default=1, verbose_name='View Count')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Who is the guest in the event??', max_length=150, null=True)),
                ('organization', models.CharField(help_text='From which Organization this guest belongs ?', max_length=200, null=True)),
                ('profile', models.CharField(blank=True, help_text='What is profile of the Guest in the Organization?', max_length=200)),
                ('addressLine1', models.CharField(blank=True, help_text="I don't think that you needs any help here!", max_length=100, null=True)),
                ('addressLine2', models.CharField(blank=True, max_length=100, null=True)),
                ('zipCode', models.CharField(blank=True, help_text='In other words,Do you know the pincode ?', max_length=10, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=150, null=True)),
                ('contact', models.CharField(blank=True, help_text='Contact number if available', max_length=14, null=True)),
                ('email', models.EmailField(blank=True, help_text="Enter the guest's email", max_length=70)),
                ('eventname', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.Event')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MediaLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mediaType', models.CharField(blank=True, choices=[('i', 'Image'), ('v', 'Vedio'), ('d', 'Document'), ('a', 'Audio')], help_text='Choose the type of Media', max_length=1, null=True)),
                ('hyperlink', models.URLField(blank=True, help_text="paste the media's url here.", null=True)),
                ('eventname', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.Event')),
            ],
        ),
        migrations.CreateModel(
            name='UploadMedai',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('pdf', models.FileField(blank=True, null=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('video', models.FileField(blank=True, null=True, upload_to='videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'mov', '3gp', 'ogg', 'oga', 'ogv', 'ogx', 'wmv', 'wma', 'webm', 'flv'])])),
                ('somethingSpecific', models.CharField(blank=True, max_length=255, null=True)),
                ('eventname', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='event.Event')),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['title'], name='event_event_title_94b911_idx'),
        ),
        migrations.AddIndex(
            model_name='uploadmedai',
            index=models.Index(fields=['eventname'], name='event_uploa_eventna_2b23d3_idx'),
        ),
    ]
